# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# A123b.py
# Created on: 2021-09-29 19:23:42.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: A123b <bridges> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# Script arguments
bridges = arcpy.GetParameterAsText(0)
if bridges == '#' or not bridges:
    bridges = "bridges" # provide a default value if unspecified

# Local variables:
URC_D_segments = "URC-D_segments"
bridges_Intersect = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect"
waterway_line = "waterway_line"
waterway_line_Intersect = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect"
waterway_line_Intersect_Buff = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect_Buff"
bridges_Intersect_Intersect = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect_Intersect"
bridges_Intersect_Intersect_ = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect_Intersect_"
bridges_dbf = bridges_Intersect_Intersect_
A_1_2_3b = "E:\\00_Cloud\\Surfdrive\\Shared\\URC_RS analyses_share\\00_Elaborations_Daniele\\Indicators\\A.1.2.3b"
bridges_dbf__2_ = bridges_dbf
waterway_line_Intersect_Diss = "C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect_Diss"
waterway_line_Intersect_Diss__2_ = waterway_line_Intersect_Diss
waterway_line_Intersect_Diss__3_ = waterway_line_Intersect_Diss__2_
waterway_lenght_dbf = waterway_line_Intersect_Diss__3_
a123b_dbf = bridges_dbf__2_
a123b_dbf__3_ = a123b_dbf
a123b_dbf__4_ = a123b_dbf__3_
a123b_dbf__2_ = a123b_dbf__4_
a123b_dbf__6_ = a123b_dbf__2_

# Process: Intersect
arcpy.Intersect_analysis("bridges #;URC-D_segments #", bridges_Intersect, "ALL", "", "INPUT")

# Process: Intersect (2)
arcpy.Intersect_analysis("waterway_line #;URC-D_segments #", waterway_line_Intersect, "ALL", "", "INPUT")

# Process: Buffer
arcpy.Buffer_analysis(waterway_line_Intersect, waterway_line_Intersect_Buff, "10 Meters", "FULL", "FLAT", "NONE", "", "PLANAR")

# Process: Intersect (3)
arcpy.Intersect_analysis("C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect #;C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect_Buff #", bridges_Intersect_Intersect, "ALL", "", "INPUT")

# Process: Dissolve
arcpy.Dissolve_management(bridges_Intersect_Intersect, bridges_Intersect_Intersect_, "segment", "Id COUNT", "MULTI_PART", "DISSOLVE_LINES")

# Process: Table to Table
arcpy.TableToTable_conversion(bridges_Intersect_Intersect_, A_1_2_3b, "bridges.dbf", "", "segment \"segment\" true true false 4 Text 0 0 ,First,#,C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect_Dissolve,segment,-1,-1;bridges \"bridges\" true true false 0 Long 0 0 ,First,#,C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\bridges_Intersect_Dissolve,COUNT_Id,-1,-1", "")

# Process: Dissolve (2)
arcpy.Dissolve_management(waterway_line_Intersect, waterway_line_Intersect_Diss, "segment", "Shape_Leng SUM", "MULTI_PART", "DISSOLVE_LINES")

# Process: Add Field (2)
arcpy.AddField_management(waterway_line_Intersect_Diss, "lenght_km", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Add Geometry Attributes
arcpy.AddGeometryAttributes_management(waterway_line_Intersect_Diss__2_, "LENGTH", "KILOMETERS", "", "")

# Process: Table to Table (2)
arcpy.TableToTable_conversion(waterway_line_Intersect_Diss__3_, A_1_2_3b, "waterway_lenght.dbf", "", "segment \"segment\" true true false 4 Text 0 0 ,First,#,C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect_Diss,segment,-1,-1;LENGTH \"LENGTH\" true true false 8 Double 0 0 ,First,#,C:\\Users\\danie\\Documents\\ArcGIS\\Default.gdb\\waterway_line_Intersect_Diss,LENGTH,-1,-1", "")

# Process: Join Field
arcpy.JoinField_management(bridges_dbf, "segment", waterway_lenght_dbf, "segment", "segment;LENGTH")

# Process: Table to Table (3)
arcpy.TableToTable_conversion(bridges_dbf__2_, A_1_2_3b, "a123b.dbf", "", "segment \"segment\" true true false 4 Text 0 0 ,First,#,E:\\00_Cloud\\Surfdrive\\Shared\\URC_RS analyses_share\\00_Elaborations_Daniele\\Indicators\\A.1.2.3b\\bridges.dbf,segment,-1,-1,E:\\00_Cloud\\Surfdrive\\Shared\\URC_RS analyses_share\\00_Elaborations_Daniele\\Indicators\\A.1.2.3b\\bridges.dbf,segment,-1,-1;bridges \"bridges\" true true false 0 Long 0 0 ,First,#,E:\\00_Cloud\\Surfdrive\\Shared\\URC_RS analyses_share\\00_Elaborations_Daniele\\Indicators\\A.1.2.3b\\bridges.dbf,bridges,-1,-1;LENGTH \"LENGTH\" true true false 8 Double 0 0 ,First,#,E:\\00_Cloud\\Surfdrive\\Shared\\URC_RS analyses_share\\00_Elaborations_Daniele\\Indicators\\A.1.2.3b\\bridges.dbf,LENGTH,-1,-1", "")

# Process: Add Field
arcpy.AddField_management(a123b_dbf, "value", "DOUBLE", "8", "2", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field
arcpy.CalculateField_management(a123b_dbf__3_, "value", "[bridges]/ [LENGTH]", "VB", "")

# Process: Add Field (3)
arcpy.AddField_management(a123b_dbf__4_, "A123b", "SHORT", "1", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field (2)
arcpy.CalculateField_management(a123b_dbf__2_, "A123b", "ifblock (!value!)", "PYTHON_9.3", "def ifBlock(value):\\n if value<2:\\n  return 1\\n elif value>=2 and value<3:\\n  return 2\\n elif value>3:\\n  return 3")

